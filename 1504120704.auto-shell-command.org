#+BLOG: rubikitch
#+POSTID: 841
#+BLOG: rubikitch
#+DATE: [2015-04-12 Sun 07:04]
#+PERMALINK: auto-shell-command
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: プログラム実行
#+EL_PKG_NAME: auto-shell-command
#+TAGS: るびきちオススメ, 初心者安心
#+EL_TITLE0: ファイル保存後に自動でシェルコマンドを実行させる
#+EL_URL: http://qiita.com/ongaeshi/items/b3f4315082c1c7942fcd
#+begin: org2blog
#+TITLE: auto-shell-command.el : ファイル保存後に自動でシェルコマンドを実行させる
[includeme file="inc-package-table.php" name="auto-shell-command" where="melpa"]

#+end:
** 概要
特に開発をしていると、ファイルを保存したらすぐに
特定のシェルコマンドを実行したいことがよくあります。

たとえば保存後すぐにコンパイル・実行したり、
設定ファイルの内容を動作中のプログラムに反映させたりなどです。

こんなときに使いたいのが[[http://ongaeshi.hatenablog.com/][ongaeshi]] さんの *auto-shell-command.el* です。

彼は[[http://ongaeshi.hatenablog.com/archive/category/milkode][ソースコード検索エンジンMilkode]] を作っただけでなく、
最近は [[http://ongaeshi.hatenablog.com/entry/i-got-the-award-in-fukuoka-ruby-07][Ruby製電子書籍検索エンジンHonyomiがGMOペパボ賞を受賞]] するなど
Rubyの世界でも大活躍をしています。

ファイル保存時に実行されるフック *after-save-hook* に
シェルコマンドを実行させる関数を登録しています。

実行するコマンドは対象ファイル名の正規表現とともにinit.elに記述します。

実行が無事に成功したらエコーエリアにsuccessと出るだけですが、
失敗したら *popwin.el* で実行結果がポップアップされます。

シェルコマンド実行の中心部分は [[http://emacs.rubikitch.com/deferred/][deferred.el(レビュー)]] 
によって非同期に行われます。

<2015-04-12 Sun> 試したところ、実行失敗後に動作しなくなるようです。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-install.php" name="auto-shell-command" where="melpa"]
** 保存時自動実行系
[[http://emacs.rubikitch.com/hookify/][hookify.el(レビュー)]] はafter-save-hook以外にも一時的なフックを設定できます。

[[http://emacs.rubikitch.com/backup-each-save/][backup-each-save.el(レビュー)]] は現在時刻付きのファイル名で
自動バックアップを行います。

[[http://emacs.rubikitch.com/auto-save-buffers-enhanced/][auto-save-buffers-enhanced.el(レビュー)]] や[[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el(レビュー)]] で
ファイルを変更して一定時間後に自動保存するelispを使っている場合、
自動保存間隔を調整しないと自動実行シェルコマンドが同時実行されてしまいます。



** 設定 [[http://rubikitch.com/f/150412065621.auto-shell-command.1.el][150412065621.auto-shell-command.1.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/150412/150412065621.auto-shell-command.1.el"
#+BEGIN_SRC fundamental
(require 'auto-shell-command)

;;; キーバインドの設定
;; 一時的に無効・有効にする
(global-set-key (kbd "C-c C-m") 'ascmd:toggle)
;; 実行結果をポップアップ表示する
(global-set-key (kbd "C-c C-,") 'ascmd:popup)
;; ファイルを指定してそれに対応するコマンドを実行させる
(global-set-key (kbd "C-c C-.") 'ascmd:exec)

;;; エラー時のポップアップを見やすくする
(push '("*Auto Shell Command*" :height 20 :noselect t) popwin:special-display-config)

;;; 結果の通知をGrowlで行う (optional)
;; (defun ascmd:notify (msg) (deferred:process-shell (format "growlnotify -m %s -t emacs" msg))))

;;; 各ファイルごとの設定
;;; $FILEがファイル名, $DIRがディレクトリ名に置換されます
;; junk/以下のRubyスクリプトは無条件で実行
(ascmd:add '("junk/.*\.rb" "ruby $FILE"))
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/150412065621.auto-shell-command.1.el
$ emacs -Q -f package-initialize -l 150412065621.auto-shell-command.1.el
#+END_EXAMPLE
[includeme file="inc-package-relate.php" name="auto-shell-command"]
