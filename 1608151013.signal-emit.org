#+BLOG: rubikitch
#+POSTID: 1528
#+BLOG: rubikitch
#+DATE: [2016-08-15 Mon 10:13]
#+PERMALINK: signal-emit
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil tex:nil ':nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs Lispライブラリ
#+EL_PKG_NAME: signal
#+TAGS: signal
#+EL_TITLE0: フックとタイマーを組み合わせたまったく新しい関数挙動変更方法
#+EL_URL: 
#+begin: org2blog
#+TITLE: signal.el : フックとタイマーを組み合わせたまったく新しい関数挙動変更方法
[includeme file="inc-package-table.php" name="signal" where="melpa"]

#+end:
** 概要
[[http://emacs.rubikitch.com/signal-hook/][昨日はsignal.elのフックとの類似性を示し]] ました。
今日はフックとの違いを示します。

おさらいすると、hookとsignalの対応関係は以下のようになっています。
| 定義     | defvar(defcustom) | defsignal         |
| 呼び出し | run-hooks         | signal-emitb      |
| 追加     | add-hook          | signal-connect    |
| 削除     | remove-hook       | signal-disconnect |

この表を見てわかるように、 *run-hooks* に対応するのが *signal-emitb* ですね。
ところでemitbとは何なのかと疑問に思わなかったでしょうか？
emitとは発行するという意味ですが、emitbという英単語は存在しません。
ではこのbとは何でしょうか？

答えばblockingのbです。

run-hooks実行中はフックが実行されているように、signal-emitb実行中はsignal関数(worker)が実行されています。
hook/signal実行中はそれらが実行されていて、次の処理をブロックしているのです。

対してnon-blockingなsignal実行関数が *signal-emit* です。
この関数は「signalを発行したよ。実行は後で任せた」という関数です。

そのココロは
/タイマー関数でsignal-emitbを呼んでいる/
ことになります。

[includeme file="inc-package-install.php" name="signal" where="melpa"]
** 実行例
#+BEGIN_SRC emacs-lisp :results silent
(require 'signal)
(defsignal my-signal)

(defvar x nil)
(signal-connect :signal 'my-signal
                :worker 'set
                ;; デフォルトの引数も指定できる
                :arg (list 'x "<I am emitted.>"))
(progn
  ;; すぐにsignalを発行する
  (signal-emitb 'my-signal)
  x)                       ; => "<I am emitted.>"
(setq x nil)
(progn
  ;; フォーム実行後にsignalを発行する
  (signal-emit 'my-signal)
  ;; フォーム実行後0.3秒後にsignalを発行する。引数も変更する
  (signal-emit 'my-signal :arg (list 'x "<emitted again>") :delay 0.3)
  x)                       ; => nil
;;; 0.1秒待つとsignalが発行されている
(sit-for 0.1)
x                                       ; => "<I am emitted.>"
;;; さらに0.3秒待つと次のsignalも発行されている
(sit-for 0.3)
x                                       ; => "<emitted again>"
;;; 後片付け
(run-at-time 1 nil 'signal-disconnect 'my-signal 'princ)
#+END_SRC

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="signal"]
