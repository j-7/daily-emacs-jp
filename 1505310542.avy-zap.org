#+BLOG: rubikitch
#+POSTID: 942
#+BLOG: rubikitch
#+DATE: [2015-05-31 Sun 05:42]
#+PERMALINK: avy-zap
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: zap-to-char
#+EL_PKG_NAME: avy-zap
#+TAGS: ace-jump, avy
#+EL_TITLE0: zap-to-char(M-z)をavy化して自然に拡張する
#+EL_URL: 
#+begin: org2blog
#+TITLE: avy-zap.el : zap-to-char(M-z)をavy化して自然に拡張する
[includeme file="inc-package-table.php" name="avy-zap" where="melpa"]

#+end:
** 概要
*avy-zap.el* は、 *M-x zap-to-char (M-z)* をavy化したものです。

[[http://emacs.rubikitch.com/avy/][avy.el(レビュー)]] というのは、[[http://emacs.rubikitch.com/ace-jump-mode/][ace-jump-mode.el(レビュー)]] の
インターフェースを汎用的に使えるようにしたものなので、
ユーザ視点ではほぼ同等のものだと言えます。

よって、avy-zap.elは[[http://emacs.rubikitch.com/ace-jump-zap/][ace-jump-zap.el(レビュー)]] と同じ働きをします。

僕はインクリメンタルに範囲を広げられるように拡張した
[[http://emacs.rubikitch.com/zop-to-char/][zop-to-char.el(レビュー)]] の方を使っています。


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150531055737.png]]
Fig1: andの前までを削除したいのでM-z aを押す

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150531055741.png]]
Fig2: 削除される！

[includeme file="inc-package-install.php" name="avy-zap" where="melpa"]
** 設定 [[http://rubikitch.com/f/150531055615.avy-zap.el][150531055615.avy-zap.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/150531/150531055615.avy-zap.el"
#+BEGIN_SRC fundamental
(global-set-key (kbd "M-z") 'avy-zap-up-to-char)
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/150531055615.avy-zap.el
$ emacs -Q -f package-initialize -l 150531055615.avy-zap.el
#+END_EXAMPLE

# /r/sync/screenshots/20150531055737.png http://rubikitch.com/wp-content/uploads/2016/07/20150531055737.png
# /r/sync/screenshots/20150531055741.png http://rubikitch.com/wp-content/uploads/2016/07/20150531055741.png
[includeme file="inc-package-relate.php" name="avy-zap"]
