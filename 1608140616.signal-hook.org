#+BLOG: rubikitch
#+POSTID: 1526
#+BLOG: rubikitch
#+DATE: [2016-08-14 Sun 06:16]
#+PERMALINK: signal-hook
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil tex:nil ':nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs Lispライブラリ
#+EL_PKG_NAME: signal
#+TAGS: signal
#+EL_TITLE0: フックの進化形が登場！その中身とは？
#+EL_URL: 
#+begin: org2blog
#+TITLE: signal.el : フックの進化形が登場！その中身とは？
[includeme file="inc-package-table.php" name="signal" where="melpa"]

#+end:
** 概要
あなたは、hookやadviceを活用していますか？
これらは関数の挙動をあなた色に染めるものです。

さて、、、

Emacsを極めるにはEmacs Lispを学ぶことが不可欠です。
なぜなら、hookやadviceに適切なコードを設定することでEmacsを強力にカスタマイズできるからです
。
たとえば、ファイルを開いたり保存したりするときに自動的にやって欲しい処理を記述できたりします。
だからこそ、Emacs Lispを学んでいれば作業を効率化できるんですね。

ということで、、

この *signal* パッケージはhookの進化形ともいえるものです。
今回はsignalをhookと同じように使う方法を示します。
進化形なのですから、元の機能をエミュレートすることなど簡単なことなのです。

hookとsignalの対応関係は以下のようになっています

| 定義     | defvar(defcustom) | defsignal         |
| 呼び出し | run-hooks         | signal-emitb      |
| 追加     | add-hook          | signal-connect    |
| 削除     | remove-hook       | signal-disconnect |

[[http://emacs.rubikitch.com/signal-emit/][明日はsignalがhookとは違うことを示します！]]
[includeme file="inc-package-install.php" name="signal" where="melpa"]
** 使用例


#+BEGIN_SRC emacs-lisp :results silent
(require 'signal)
;;; 定義
(defvar my-hook nil
  "Test hook")
(defsignal my-signal
  "Test signal")
;;; 元の関数を呼び出す
(defun test-func ()
  (with-output-to-string
    (princ "Hook")
    (run-hooks 'my-hook)
    (princ "/")
    (princ "Signal")
    (signal-emitb 'my-signal)
    (princ "/")))
(test-func)                             ; => "Hook/Signal/"

;;; 関数を追加する
(setq test-count 0)
(defun print-count ()
  "呼ばれた回数を表示する"
  (princ (cl-incf test-count)))
;; hookとは違い、signalは追加された数だけ同じ関数が実行される
(add-hook 'my-hook 'print-count)
(signal-connect :signal 'my-signal :worker 'print-count)
(add-hook 'my-hook 'print-count)
(signal-connect :signal 'my-signal :worker 'print-count)
(test-func)                             ; => "Hook1/Signal23/"
;;; 関数を削除する
(remove-hook 'my-hook 'print-count)
(signal-disconnect 'my-signal 'print-count)
(test-func)                             ; => "Hook/Signal/"
#+END_SRC

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="signal"]
