#+BLOG: rubikitch
#+POSTID: 1237
#+BLOG: rubikitch
#+DATE: [2015-11-08 Sun 11:48]
#+PERMALINK: replace-symbol
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: 置換
#+EL_PKG_NAME: replace-symbol
#+TAGS: リファクタリング
#+EL_TITLE0: 【リファクタリング】S式・バッファ(・関数)全体のシンボルを置換する
#+EL_URL: 
#+begin: org2blog
#+TITLE: replace-symbol.el : 【リファクタリング】S式・バッファ(・関数)全体のシンボルを置換する
[includeme file="inc-package-table.php" name="replace-symbol" where="melpa"]

#+end:
** 概要
*replace-symbol.el* はシンボル置換を行うリファクタリング支援elispです。
*M-x replace-symbol-in-sexp* は現在のS式においてシンボルを置換し、
*M-x replace-symbol-in-buffer* はバッファ全体のシンボルを置換します。

ただ、コードを読んでいて疑問に感じたのは、なぜ正規表現によるシンボル置換を使っていないのかなということです。
正規表現「\_<symbol\_>」でsymbolシンボルにマッチする正規表現になります。

ちょうど手元に僕が昔定義した *M-x replace-symbol-in-defun* がありますが、こんなに短いです。
replace-symbol-in-sexpと違い、C-M-aする必要がないのでよく使っています。
replace-regexpをLispから呼ぶのは非推奨ですが、これは単なるラッパーなのであえて呼んでいます。

#+BEGIN_EXAMPLE
(defun replace-symbol-in-defun (symbol to-string)
  (interactive
   (let ((common (query-replace-read-args "Replace symbol in defun" nil)))
     (list (nth 0 common) (nth 1 common))))
  (save-excursion
    (beginning-of-defun)
    (let ((end-of-defun (save-excursion (end-of-defun) (point))))
      (replace-regexp (concat "\\_<" (regexp-quote symbol) "\\_>") to-string nil
                      (point) end-of-defun))))
#+END_EXAMPLE

同様にsexp間もバッファ間も置換範囲を指定すればそれで目的が達成されるのではないでしょうか。

それはさておき、シンボル正規表現を入力するのが面倒なので使う価値はあると思います。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-install.php" name="replace-symbol" where="melpa"]
[includeme file="inc-package-relate.php" name="replace-symbol"]
