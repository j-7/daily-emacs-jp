#+BLOG: rubikitch
#+POSTID: 384
#+BLOG: rubikitch
#+DATE: [2014-11-02 Sun 09:55]
#+PERMALINK: backup-each-save
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:保存するたびに別ディレクトリに日付付きファイルで自動バックアップ
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: 自動保存
#+EL_PKG_NAME: backup-each-save
#+TAGS: ソース解読推奨, セーフガード
#+EL_TITLE0: Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ
#+begin: org2blog
#+TITLE: backup-each-save.el : Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ
[includeme file="inc-package-table.php" name="backup-each-save" where="melpa"]
** 概要
<2015-02-03 Tue> [[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el]] と組み合わせるといいです。

あなたは大切なデータを失ってしまったことはないでしょうか？

たとえ毎日 *バックアップ* をとっていたとしても、
それでも事故ってしまうことがあります。

複数のメディアに日々のバックアップをしていれば
データそのものを失う危険性は限りなく低くなります。

しかし、怖いのは間違って *上書き保存* してしまうことです。

別のコンピュータから古いデータを持って来て上書き保存してしまったり、
2つのコンピュータで別々の変更をしてマージせずに保存してしまったり、
その後でそのデータが自動バックアップされてしまったら…
目も当てられませんね。

そこで、Emacsで編集するファイルに限定されますが、
保存したときにバックアップディレクトリに日時付きで
バックアップしてしまえば、怖いことはありません。

日時付きバックアップとは
たとえばホームディレクトリが/rのとき、
#+BEGIN_EXAMPLE
/r/memo/wp/1411020955.org
↓
/r/.emacs.d/backups/r/memo/wp/1411020955.org-141102_101949
#+END_EXAMPLE
のように別な場所に保存されることです。

C-x C-sするたびにバックアップディレクトリにバックアップが保存されるので、
バックアップディレクトリの容量には注意してください。

とはいえ、このEmacs Lispは初出10年前だし、テラバイト時代の今では
高々テキストファイルの逐次バックアップくらいは問題ないです。

[[http://emacs.rubikitch.com/auto-save-buffers-enhanced/][auto-save-buffers-enhanced.el(レビュー)]] や
[[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el(レビュー)]] と組み合わせて
自動保存させてしまえばまさに鉄璧です。

日々のバックアップ＋リモートバックアップもしてしまえば
災害でパソコンが破壊されてしまってもデータが失われることは
もはや有り得なくなります。

データ消失に対する万全の対策はなによりも安心です。
[includeme file="inc-package-install.php" name="backup-each-save" where="melpa"]

#+end:
** 概要                                                             :noexport:
<2015-02-03 Tue> [[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el]] と組み合わせるといいです。

あなたは大切なデータを失ってしまったことはないでしょうか？

たとえ毎日 *バックアップ* をとっていたとしても、
それでも事故ってしまうことがあります。

複数のメディアに日々のバックアップをしていれば
データそのものを失う危険性は限りなく低くなります。

しかし、怖いのは間違って *上書き保存* してしまうことです。

別のコンピュータから古いデータを持って来て上書き保存してしまったり、
2つのコンピュータで別々の変更をしてマージせずに保存してしまったり、
その後でそのデータが自動バックアップされてしまったら…
目も当てられませんね。

そこで、Emacsで編集するファイルに限定されますが、
保存したときにバックアップディレクトリに日時付きで
バックアップしてしまえば、怖いことはありません。

日時付きバックアップとは
たとえばホームディレクトリが/rのとき、
#+BEGIN_EXAMPLE
/r/memo/wp/1411020955.org
↓
/r/.emacs.d/backups/r/memo/wp/1411020955.org-141102_101949
#+END_EXAMPLE
のように別な場所に保存されることです。

C-x C-sするたびにバックアップディレクトリにバックアップが保存されるので、
バックアップディレクトリの容量には注意してください。

とはいえ、このEmacs Lispは初出10年前だし、テラバイト時代の今では
高々テキストファイルの逐次バックアップくらいは問題ないです。

[[http://emacs.rubikitch.com/auto-save-buffers-enhanced/][auto-save-buffers-enhanced.el(レビュー)]] や
[[http://emacs.rubikitch.com/real-auto-save/][real-auto-save.el(レビュー)]] と組み合わせて
自動保存させてしまえばまさに鉄璧です。

日々のバックアップ＋リモートバックアップもしてしまえば
災害でパソコンが破壊されてしまってもデータが失われることは
もはや有り得なくなります。

データ消失に対する万全の対策はなによりも安心です。

** 設定 [[http://rubikitch.com/f/141102094122.backup-each-save.el][141102094122.backup-each-save.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/141102/141102094122.backup-each-save.el"
#+BEGIN_SRC fundamental
;;; バックアップ先
(setq backup-each-save-mirror-location "~/.emacs.d/backups")
;;; バックアップファイルにつけるsuffix
(setq backup-each-save-time-format "%y%m%d_%H%M%S")
;;; バックアップするファイルサイズの上限
(setq backup-each-save-size-limit 5000000)
;;; バックアップ作成するファイルを判定
;; (defun backup-each-save-backup-p (filename)
;;   (string-match
;;    ;; ファイル名に/sync/が含まれるときのみバックアップする
;;    (rx (or "/sync/"))
;;    (file-truename filename)))
;; (setq backup-each-save-filter-function 'backup-each-save-backup-p)
;;; すべてのファイルをバックアップする
(setq backup-each-save-filter-function 'identity)
;;; 有効化！
(add-hook 'after-save-hook 'backup-each-save)
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/141102094122.backup-each-save.el
$ emacs -Q -f package-initialize -l 141102094122.backup-each-save.el
#+END_EXAMPLE

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="backup-each-save"]
