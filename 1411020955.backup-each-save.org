#+BLOG: rubikitch
#+POSTID: 544
#+DATE: [2014-11-02 Sun 09:55]
#+PERMALINK: backup-each-save
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs, ソース解読推奨
#+EL_PKG_NAME: backup-each-save
#+EL_TAGS: emacs, emacs lisp %p, elisp %p, emacs %f %p, emacs %p 使い方, emacs %p 設定, emacs パッケージ %p, emacs バックアップ, emacs データ消えた, emacs 事故対策, emacs 保険, relate:auto-save-buffers-enhanced, relate:real-auto-save
#+EL_TITLE: Emacs Lisp Elisp パッケージ インストール 設定 使い方
#+EL_TITLE0: Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ
#+begin: org2blog
#+DESCRIPTION: MELPAのEmacs Lispパッケージbackup-each-saveの紹介
#+MYTAGS: package:backup-each-save, emacs 使い方, emacs コマンド, emacs, emacs lisp backup-each-save, elisp backup-each-save, emacs melpa backup-each-save, emacs backup-each-save 使い方, emacs backup-each-save 設定, emacs パッケージ backup-each-save, emacs バックアップ, emacs データ消えた, emacs 事故対策, emacs 保険, relate:auto-save-buffers-enhanced, relate:real-auto-save
#+TAGS: package:backup-each-save, emacs 使い方, emacs コマンド, emacs, emacs lisp backup-each-save, elisp backup-each-save, emacs melpa backup-each-save, emacs backup-each-save 使い方, emacs backup-each-save 設定, emacs パッケージ backup-each-save, emacs バックアップ, emacs データ消えた, emacs 事故対策, emacs 保険, relate:auto-save-buffers-enhanced, relate:real-auto-save, Emacs, ソース解読推奨, バックアップ, 上書き保存, バックアップ, 上書き保存
#+TITLE: emacs backup-each-save.el : Emacs式大富豪的バックアップ！保存する度に日時付きファイルでバックアップ | MELPA Emacs Lisp Elisp パッケージ インストール 設定 使い方
#+BEGIN_HTML
<table>
<tr><td>パッケージ名</td><td>backup-each-save</td></tr>
<tr><td>概要(原文)</td><td>backup each savepoint of a file</td></tr>
<tr><td>リポジトリ</td><td><a href="http://melpa.org/">MELPA</a></td></tr>
<tr><td>取得先</td><td><a href="http://www.emacswiki.org/backup-each-save.el">http://www.emacswiki.org/backup-each-save.el</a></td></tr>
<tr><td>バージョン</td><td>20130704.732</td></tr>
<tr><td>関連記事</td><td><a href="http://rubikitch.com/tag/package:backup-each-save/">package:backup-each-save</a> <a href="http://rubikitch.com/tag/package:auto-save-buffers-enhanced/">package:auto-save-buffers-enhanced</a> <a href="http://rubikitch.com/tag/package:real-auto-save/">package:real-auto-save</a></td></tr>
</table>
<br />
#+END_HTML
<2015-02-03 Tue> [[http://rubikitch.com/2015/02/03/real-auto-save/][real-auto-save.el]] と組み合わせるといいです。

あなたは大切なデータを失ってしまったことはないでしょうか？

たとえ毎日 *バックアップ* をとっていたとしても、
それでも事故ってしまうことがあります。

複数のメディアに日々のバックアップをしていれば
データそのものを失う危険性は限りなく低くなります。

しかし、怖いのは間違って *上書き保存* してしまうことです。

別のコンピュータから古いデータを持って来て上書き保存してしまったり、
2つのコンピュータで別々の変更をしてマージせずに保存してしまったり、
その後でそのデータが自動バックアップされてしまったら…
目も当てられませんね。

そこで、Emacsで編集するファイルに限定されますが、
保存したときにバックアップディレクトリに日時付きで
バックアップしてしまえば、怖いことはありません。

日時付きバックアップとは
たとえばホームディレクトリが/rのとき、
#+BEGIN_EXAMPLE
/r/memo/wp/1411020955.org
↓
/r/.emacs.d/backups/r/memo/wp/1411020955.org-141102_101949
#+END_EXAMPLE
のように別な場所に保存されることです。

C-x C-sするたびにバックアップディレクトリにバックアップが保存されるので、
バックアップディレクトリの容量には注意してください。

とはいえ、このEmacs Lispは初出10年前だし、テラバイト時代の今では
高々テキストファイルの逐次バックアップくらいは問題ないです。

[[http://rubikitch.com/2014/11/23/auto-save-buffers-enhanced/][auto-save-buffers-enhanced.el(レビュー)]] や
[[http://rubikitch.com/2015/02/03/real-auto-save/][real-auto-save.el(レビュー)]] と組み合わせて
自動保存させてしまえばまさに鉄璧です。

日々のバックアップ＋リモートバックアップもしてしまえば
災害でパソコンが破壊されてしまってもデータが失われることは
もはや有り得なくなります。

データ消失に対する万全の対策はなによりも安心です。
** backup-each-save インストール
このパッケージはmelpaにあるので [[http://rubikitch.com/package-initialize][パッケージの初期設定]] を行ってください。

M-x package-refresh-contents
M-x package-install backup-each-save


#+end:
** 概要                                                             :noexport:
<2015-02-03 Tue> [[http://rubikitch.com/2015/02/03/real-auto-save/][real-auto-save.el]] と組み合わせるといいです。

あなたは大切なデータを失ってしまったことはないでしょうか？

たとえ毎日 *バックアップ* をとっていたとしても、
それでも事故ってしまうことがあります。

複数のメディアに日々のバックアップをしていれば
データそのものを失う危険性は限りなく低くなります。

しかし、怖いのは間違って *上書き保存* してしまうことです。

別のコンピュータから古いデータを持って来て上書き保存してしまったり、
2つのコンピュータで別々の変更をしてマージせずに保存してしまったり、
その後でそのデータが自動バックアップされてしまったら…
目も当てられませんね。

そこで、Emacsで編集するファイルに限定されますが、
保存したときにバックアップディレクトリに日時付きで
バックアップしてしまえば、怖いことはありません。

日時付きバックアップとは
たとえばホームディレクトリが/rのとき、
#+BEGIN_EXAMPLE
/r/memo/wp/1411020955.org
↓
/r/.emacs.d/backups/r/memo/wp/1411020955.org-141102_101949
#+END_EXAMPLE
のように別な場所に保存されることです。

C-x C-sするたびにバックアップディレクトリにバックアップが保存されるので、
バックアップディレクトリの容量には注意してください。

とはいえ、このEmacs Lispは初出10年前だし、テラバイト時代の今では
高々テキストファイルの逐次バックアップくらいは問題ないです。

[[http://rubikitch.com/2014/11/23/auto-save-buffers-enhanced/][auto-save-buffers-enhanced.el(レビュー)]] や
[[http://rubikitch.com/2015/02/03/real-auto-save/][real-auto-save.el(レビュー)]] と組み合わせて
自動保存させてしまえばまさに鉄璧です。

日々のバックアップ＋リモートバックアップもしてしまえば
災害でパソコンが破壊されてしまってもデータが失われることは
もはや有り得なくなります。

データ消失に対する万全の対策はなによりも安心です。

** 設定 [[http://rubikitch.com/f/141102094122.backup-each-save.el][141102094122.backup-each-save.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/141102/141102094122.backup-each-save.el"
#+BEGIN_SRC fundamental
;;; バックアップ先
(setq backup-each-save-mirror-location "~/.emacs.d/backups")
;;; バックアップファイルにつけるsuffix
(setq backup-each-save-time-format "%y%m%d_%H%M%S")
;;; バックアップするファイルサイズの上限
(setq backup-each-save-size-limit 5000000)
;;; バックアップ作成するファイルを判定
;; (defun backup-each-save-backup-p (filename)
;;   (string-match
;;    ;; ファイル名に/sync/が含まれるときのみバックアップする
;;    (rx (or "/sync/"))
;;    (file-truename filename)))
;; (setq backup-each-save-filter-function 'backup-each-save-backup-p)
;;; すべてのファイルをバックアップする
(setq backup-each-save-filter-function 'identity)
;;; 有効化！
(add-hook 'after-save-hook 'backup-each-save)
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/141102094122.backup-each-save.el
$ emacs -Q -f package-initialize -l 141102094122.backup-each-save.el
#+END_EXAMPLE

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
