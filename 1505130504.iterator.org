#+BLOG: rubikitch
#+POSTID: 908
#+BLOG: rubikitch
#+DATE: [2015-05-13 Wed 05:04]
#+PERMALINK: iterator
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: 制御構造
#+EL_PKG_NAME: iterator
#+TAGS: ループ
#+EL_TITLE0: Emacs Lispで外部イテレータを実現する
#+EL_URL: 
#+begin: org2blog
#+TITLE: iterator.el : Emacs Lispで外部イテレータを実現する
[includeme file="inc-package-table.php" name="iterator" where="melpa"]

#+end:
** 概要
*iterator.el* はRubyの *Enumerator* のような
*外部イテレータ* を実現します。

#+BEGIN_SRC ruby :results xmp silent
# Rubyにて
# 外部イテレータとして使う
i = [1,2,3].to_enum             # => #<Enumerator: [1, 2, 3]:each>
i.next                          # => 1
i.next                          # => 2
i.next                          # => 3
i.next rescue $!
# => #<StopIteration: iteration reached an end>
# 循環リスト
i = [1,2].cycle                 # => #<Enumerator: [1, 2]:cycle>
i.next                          # => 1
i.next                          # => 2
i.next                          # => 1
i.next                          # => 2
#+END_SRC


イテレータオブジェクト(クロージャ)を作成する関数は多いですが、
<2015-05-13 Wed>時点では *iterator:next* で
次の要素を得るくらいしかできません。

#+BEGIN_SRC emacs-lisp :results silent
;;; リストからなるイテレータ
(let ((iter (iterator:list '(1 2 3))))
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => 2
  (iterator:next iter)                  ; => 3
  (iterator:next iter)                  ; => nil
  )
;;; 指定された要素の次の要素から繰り返す
(let ((iter (iterator:sub-next '(1 2 3 4) 2)))
  (iterator:next iter)                  ; => 3
  (iterator:next iter)                  ; => 4
  (iterator:next iter)                  ; => nil
  )
;;; 指定された要素の前の要素から逆順で繰り返す
(let ((iter (iterator:sub-prec '(1 2 3 4) 2)))
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => nil
  )
;;; 循環リストのイテレータ
(let ((iter (iterator:circular '(1 2 3))))
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => 2
  (iterator:next iter)                  ; => 3
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => 2
  )
;;; 指定された要素の次の要素から繰り返す(循環リスト)
(let ((iter (iterator:sub-next-circular '(1 2 3) 2)))
  (iterator:next iter)                  ; => 3
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => 2
  (iterator:next iter)                  ; => 3
  (iterator:next iter)                  ; => 1
  )
;;; 指定された要素の前の要素から逆順で繰り返す(循環リスト)
(let ((iter (iterator:sub-prec-circular '(1 2 3) 2)))
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => 3
  (iterator:next iter)                  ; => 2
  (iterator:next iter)                  ; => 1
  (iterator:next iter)                  ; => 3
  )
;;; リストに関数を適用したイテレータ
(let ((iter (iterator:apply-fun-on-list 'sqrt '(1 2 3))))
  (iterator:next iter)                  ; => 1.0
  (iterator:next iter)                  ; => 1.4142135623730951
  (iterator:next iter)                  ; => 1.7320508075688772
  (iterator:next iter)                  ; => nil
  )
;;; 指定された数の要素だけ取り出すイテレータ
(let ((iter (iterator:scroll-list '(1 2 3 4 5) 3)))
  (iterator:next iter)                  ; => (1 2 3)
  (iterator:next iter)                  ; => (2 3 4)
  (iterator:next iter)                  ; => (3 4 5)
  (iterator:next iter)                  ; => (4 5)
  (iterator:next iter)                  ; => (5)
  (iterator:next iter)                  ; => nil
  )

#+END_SRC

ちなみに、 *helm* でも *helm-iter-list* / *helm-iter-next* という名前で
外部イテレータがこっそり使われています。

それらをライブラリに追い出したとも言えます。
[includeme file="inc-package-install.php" name="iterator" where="melpa"]
[includeme file="inc-package-relate.php" name="iterator"]
