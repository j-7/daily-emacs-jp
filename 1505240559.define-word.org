#+BLOG: rubikitch
#+POSTID: 928
#+BLOG: rubikitch
#+DATE: [2015-05-24 Sun 05:59]
#+PERMALINK: define-word
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: 辞書・翻訳
#+EL_PKG_NAME: define-word
#+TAGS: 
#+EL_TITLE0: 【英英辞典】カーソル位置の単語・ミニバッファ入力の単語の意味を表示する
#+EL_URL: http://oremacs.com/2015/05/22/define-word/
#+begin: org2blog
#+TITLE: define-word.el : 【英英辞典】カーソル位置の単語・ミニバッファ入力の単語の意味を表示する
[includeme file="inc-package-table.php" name="define-word" where="melpa"]

#+end:
** 概要
*define-word.el* は、オンライン英英辞典 https://wordnik.com/ の
Emacsインターフェースを提供する新入りelispです。

<2015-05-24 Sun>時点においては2つのコマンドが用意されています。

どちらも単語の意味をエコーエリアに表示するものです。

*M-x define-word-at-point* はカーソル位置・regionの単語、
*M-x define-word* はミニバッファから入力された単語です。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150524060646.png]]
Fig1: bufferの意味を表示

https://wordnik.com/words/buffer と比べてみてください。

表示される数は変数 *define-word-limit* (デフォルト:10) で変更できますが、
フレームの高さにも依存します。
[includeme file="inc-package-install.php" name="define-word" where="melpa"]
** コードを読んでみると
<2015-05-24 Sun>時点においては、本当に2つの関数しか定義されていません。

コードは50行程度と実に短いです。

本体は *define-word* 関数にあり、
 *url-retrieve* 関数を呼び出しているだけです。

この関数は非同期にダウンロードするものであり、
第2引数はダウンロード後に実行されるコールバック関数です。

そこではダウンロードされた内容のバッファをカレントバッファとし、
HTMLを正規表現で解析して情報を抽出し、表示していることがわかります。

elispで書かれた *クローラー* のサンプルとしてほどよい難易度です。

この程度のものならばurl-retrieveでもいいですが、
本格的なものは [[http://emacs.rubikitch.com/request/][request.el(レビュー)]] を使う方が賢明です。

また、define-wordという名前から、
将来的には他のサイトに対応するかもしれません。
[includeme file="inc-package-relate.php" name="define-word"]
