#+BLOG: rubikitch
#+POSTID: 1546
#+BLOG: rubikitch
#+DATE: [2016-08-24 Wed 06:06]
#+PERMALINK: refine
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil tex:nil ':nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs Lisp支援
#+EL_PKG_NAME: refine
#+TAGS: 
#+EL_TITLE0: リストの値をvi風コマンドで編集する
#+EL_URL: 
#+begin: org2blog
#+TITLE: refine.el : リストの値をvi風コマンドで編集する
[includeme file="inc-package-table.php" name="refine" where="melpa"]

#+end:
** 概要
*refine.el* は、リストの値を編集するのに便利なユーザーインターフェースを提供します。
昨日紹介した[[http://emacs.rubikitch.com/edit-list/][edit-list.el(レビュー)]] はemacs-lisp-modeで直接編集する形ですが、
*M-x refine* を実行すると、viのようにコマンドベースで編集する画面が出てきます。

p(*refine-previous*) とn(*refine-next*)で要素を移動し、
RETあるいはe(*refine-edit*) で編集します。
「k(*refine-delete*)」で要素を削除します。
「i(*refine-insert*)」や「a(*refine-insert-after*)」で要素を追加するあたりがvi風味です。
また、M-<up> (*refine-move-forward*) 、M-<down> (*refine-move-backward*) のように
org-modeを思わせる要素の移動も可能です。

リストの編集コマンドは即座に変数に反映されます。
編集が終われば「q(*kill-this-buffer*)」でrefineから抜け出します。

refineはフックのような大きいリストを編集するのに便利です。
また、kill-ringの要素を入れ替えるとデバッグツールとして使えます。

#+ATTR_HTML: :width 480
[[https://github.com/Wilfred/refine/raw/master/edit_hook.gif]]
Fig1: 本家スクリーンショット(prog-mode-hook)

#+ATTR_HTML: :width 480
[[https://github.com/Wilfred/refine/raw/master/kill_ring.gif]]
Fig2: 本家スクリーンショット(kill-ring)

っと、ここまで書いてきましたが、[[http://emacs.rubikitch.com/edit-list/][edit-list.el]] と
どちらかがいいかというと好みの問題だと思いました。

edit-list.elはemacs-lisp-modeのままで編集できるので
学習コストがほぼゼロであるメリットがあります。
# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-install.php" name="refine" where="melpa"]
[includeme file="inc-package-relate.php" name="refine"]
