#+BLOG: rubikitch
#+POSTID: 1074
#+BLOG: rubikitch
#+DATE: [2015-08-10 月 18:06]
#+PERMALINK: string-edit
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: 複数のメジャーモード
#+EL_PKG_NAME: string-edit
#+TAGS: 
#+EL_TITLE0: 【エスケープ地獄からの脱出】JavaScript文字列リテラルを別バッファで編集する
#+EL_URL: 
#+begin: org2blog
#+TITLE: string-edit.el : 【エスケープ地獄からの脱出】JavaScript文字列リテラルを別バッファで編集する
[includeme file="inc-package-table.php" name="string-edit" where="melpa"]

#+end:
** 概要
*string-edit.el* は、ソースコード中の文字列リテラルを
別バッファで編集するパッケージです。

文字列リテラルで *M-x string-edit-at-point* を
実行すれば、その文字列が別バッファにてポップアップされます。

編集終了時にC-c C-cを押せば元のコードに反映され、
C-c C-kで取り止めます。

[[https://asciinema.org/a/3040][本家動画]] を見れがわかるように、JavaScript(*js2-mode*)は
特別な処理がなされていて、複数行の文字列に対応してくれます。

それ以外の言語の場合、複数行の文字列リテラルは\nで1行になってしまいます。

とはいえ、 *se/find-original* がこのようになっているので、
言語に特化した *se/string-at-point* を定義し、
それを呼ぶようにse/find-originalを再定義すれば多言語に対応できるでしょう。

#+BEGIN_SRC emacs-lisp :results silent
(defun se/find-original ()
  (if (derived-mode-p 'js2-mode 'js-mode)
      (se/js-strings-at-point)
    (se/string-at-point)))
#+END_SRC


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150810181600.png]]
Fig1: 文字列リテラルでM-x string-at-pointするとポップアップ

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150810181611.png]]
Fig2: 編集

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150810181615.png]]
Fig3: C-c C-cで反映される(js以外では1行化される…)

[includeme file="inc-package-install.php" name="string-edit" where="melpa"]
[includeme file="inc-package-relate.php" name="string-edit"]
