#+BLOG: rubikitch
#+POSTID: 257
#+BLOG: rubikitch
#+DATE: [2014-08-31 Sun 12:04]
#+PERMALINK: helm-ls-git
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t
#+ISPAGE: nil
#+DESCRIPTION:git lsの結果をhelmでアレコレする(magit非依存)
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: git
#+EL_PKG_NAME: helm-ls-git
#+TAGS: git, 外部プログラム使用, るびきちオススメ, helm
#+EL_TITLE0: gitで管理されているファイル群をhelmで絞り込み検索して操作する
#+begin: org2blog
#+TITLE: helm-ls-git.el : gitで管理されているファイル群をhelmで絞り込み検索して操作する
[includeme file="inc-package-table.php" name="helm-ls-git" where="melpa"]

#+end:
このパッケージを使うにはhelmも最新版にしておく必要があります。

M-x package-install helm

** 概要

*helm-ls-git.el* は *git* で管理されているファイル群を
 *helm* で操作するものです。

<2014-12-28 Sun>追記
[[http://emacs.rubikitch.com/helm-cmd-t/][helm-cmd-t(レビュー)]] は他のバージョン管理システムに
対応している上でなにより高速です。
Windowsでも高速に動くように設計されています。

Emacsとgitといえば *magit* が有名ですが、これはmagitに依存しません。

gitリポジトリ上でM-x helm-browse-projectを実行してください。

このコマンドは2つの情報源からできています。

- git status
- git ls-files

操作したいファイルでRETを押せばそのファイルを開きます。

それ以外の操作をするときにはTABでアクションを開いて選択してください。

ファイルの状態によってアクションが変わってきます。

git status情報源では新規ファイルの場合は「Add file(s)」が出てくるし、
ファイルを変更した場合はcommit/diff/revertができるようになります。

git ls-files情報源では、git lsでリストされるファイル名で
通常のfileアクションが行えます… *grep* したり *ediff* したり。

プロジェクト管理を行う *projectile* や
*helm-projectile* との比較についてはそのうち。
# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
http://rubikitch.com/f/20140831124037.png
Fig1: M-x helm-browse-project

http://rubikitch.com/f/20140831124044.png
Fig2: 変更されたファイルに対してのアクション
[includeme file="inc-package-install.php" name="helm-ls-git" where="melpa"]
[includeme file="inc-package-relate.php" name="helm-ls-git"]
