#+BLOG: rubikitch
#+POSTID: 924
#+BLOG: rubikitch
#+DATE: [2015-05-21 Thu 10:05]
#+PERMALINK: http
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Web
#+EL_PKG_NAME: http
#+TAGS: 
#+EL_TITLE0: 【HTTPクライアント】バッファからHTTPリクエストを対話的に送る
#+EL_URL: 
#+begin: org2blog
#+TITLE: http.el : 【HTTPクライアント】バッファからHTTPリクエストを対話的に送る
[includeme file="inc-package-table.php" name="http" where="melpa"]

#+end:
** 概要
去年は[[http://emacs.rubikitch.com/ruby-crawler-book/][『Rubyによるクローラー開発技法』(共著)]] を出版し、
お蔭様で大好評となっています。

買ってくださった方々、本当にありがとうございます。

Webアクセスを自動化したい、
クローラーを作りたい
そういった場合はまずHTTPリクエストとレスポンスを調査する必要があります。

さて、今回紹介する *http.el* は対話型HTTPクライアントです。

バッファ(ファイル)に1つ以上のHTTPリクエストを書いて送信すると
別バッファにてレスポンスが表示されます。

使い方はたった3ステップです。
1. HTTPリクエストを書く
2. M-x http-mode
3. C-c C-cで送信！

なお、使用例で使っている https://httpbin.org/ は
HTTPクライアント開発のためのサイトで
手軽にPOSTリクエストをテストできます。


[includeme file="inc-package-install.php" name="http" where="melpa"]
** 使用例
misc/example.txtより抜粋！

一番上に「# -*- http -*-」と書くことで、
そのファイルを再び開いたときは自動的にhttp-modeになります。

#+BEGIN_EXAMPLE
# -*- http -*-
# はコメント
# GETリクエストは単純に1行でよい
# 
## 自分のIPアドレス
GET https://httpbin.org/ip
## xmlを表示する
GET https://httpbin.org/xml

## ヘッダをつける
POST https://httpbin.org/post?foo=bar
User-Agent: Emacs24

## POSTリクエスト
# ヘッダとデータの間には空行を入れる
POST https://httpbin.org/post?val=key
User-Agent: Emacs24
Content-Type: application/json

{
  "foo": "bar"
}
#+END_EXAMPLE

一番下のPOSTリクエストを実行すると

#+BEGIN_EXAMPLE
{
  "url": "https:\/\/httpbin.org\/post?val=key",
  "origin": "1.23.45.67",
  "json": {
    "foo": "bar"
  },
  "headers": {
    "User-Agent": "Emacs24",
    "Host": "httpbin.org",
    "Content-Type": "application\/json",
    "Content-Length": "21",
    "Accept-Encoding": "deflate, gzip",
    "Accept": "*\/*"
  },
  "form": null,
  "files": null,
  "data": "\n{\n  \"foo\": \"bar\"\n}\n\n",
  "args": {
    "val": "key"
  }
}
// HTTP/1.1 200 OK
// Server: nginx
// Date: Thu, 21 May 2015 01:24:00 GMT
// Content-Type: application/json
// Content-Length: 435
// Connection: keep-alive
// Access-Control-Allow-Origin: *
// Access-Control-Allow-Credentials: true
#+END_EXAMPLE

と出てきます。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="http"]
