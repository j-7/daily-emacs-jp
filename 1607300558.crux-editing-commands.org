#+BLOG: rubikitch
#+POSTID: 1500
#+BLOG: rubikitch
#+DATE: [2016-07-30 Sat 05:58]
#+PERMALINK: crux-editing-commands
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: インデント
#+EL_PKG_NAME: crux
#+TAGS: ソース解読推奨, crux
#+EL_TITLE0: 【10選】標準コマンドをちょっと便利にするいろいろな編集コマンド
#+EL_URL: 
#+begin: org2blog
#+TITLE: crux.el : 【10選】標準コマンドをちょっと便利にするいろいろな編集コマンド
[includeme file="inc-package-table.php" name="crux" where="melpa"]

#+end:
** 概要
#+INCLUDE: "include.crux.org" 

cruxには様々な編集コマンドが用意されています。
ひとつひとつ見ていきましょう。

[includeme file="inc-package-install.php" name="crux" where="melpa"]
** M-x crux-indent-rigidly-and-copy-to-clipboard
*M-x crux-indent-rigidly-and-copy-to-clipboard* は、
regionをインデントした内容をキルリングとクリップボードに格納します。


このコマンドを実行しても、見た目上何の変化もないので不思議に思うかもしれませんが、
M-x helm-show-kill-ringやM-x anything-show-kill-ringでキルリングの内容を見てみればインデントされた内容が入っていることが確認されます。

デフォルトのインデント幅は4ですが、数引数により任意の数のインデントに設定できます。
デフォルトが4なのは、おそらくMarkdownでコードを貼り付ける際にスペース4つのインデントが必要だからだと思われます。
ブラウザからGitHubへ書き込むときにEmacsのコードを貼り付けるのに便利でしょう。

** M-x crux-smart-open-line-above

*M-x crux-smart-open-line-above* は、現在行より1つ上の行に空行を作成した後にインデントします。
実行時の桁には依存しません。

カーソル位置を★とすると、このような挙動になります。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  ★
  (interactive)
  )
#+END_SRC



** M-x crux-smart-open-line
*M-x crux-smart-open-line* は、現在行より1つ下の行に空行を作成した後にインデントします。
crux-smart-open-line-aboveと対比してください。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (interactive)
  ★
  )
#+END_SRC

** M-x crux-top-join-line
*M-x crux-top-join-line* は、下の行と連結します。
ぶっちゃけ (delete-indentation 1) を呼んでいるだけです。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (interactive)★)
#+END_SRC

** M-x crux-kill-whole-line
*M-x crux-kill-whole-line* は、 *M-x kill-whole-line* の後にインデントします。
現在行の内容はC-k 同様削除されてキルリングに格納されます。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  ★)
#+END_SRC

** M-x crux-kill-line-backwards
*M-x crux-kill-line-backwards* は、現在行の行頭からカーソル位置までを削除し、キルリングに挿入します。
その後にインデントを正します。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  active)
  )
#+END_SRC

見ての通り、Lispで使うと括弧の対応が崩れるので危険です(笑)
** M-x crux-move-beginning-of-line
*M-x crux-move-beginning-of-line* は、C-a(*M-x beginning-of-line*)の強力版です。
最初に行頭の非空白文字に移動し、もう一度実行すると行頭に移動します。
M-m (*M-x back-to-indentation*) と *M-x move-beginning-of-line* の合わせ技です

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  ★(interactive)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
★  (interactive)
  )
#+END_SRC


** M-x crux-indent-defun
*M-x crux-indent-defun* は、現在の関数をインデントします。
不思議なことにEmacs標準にはなぜかM-x indent-defunが用意されていないのです。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
    (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC


** M-x crux-ispell-word-then-abbrev
*M-x crux-ispell-word-then-abbrev* は、 M-$ (*M-x ispell-word* でスペルチェック)の後に略語を登録します(*define-abbrev*)。
英語でスペルチェックするには aspell をインストール後、 ~/.aspell.conf に

#+BEGIN_EXAMPLE
lang en_US
#+END_EXAMPLE

と書いてください。

C-uをつけるとlocal abbrev、つけないとglobal abbrevとなります。

** M-x crux-insert-date
*M-x crux-insert-date* は、現在時刻をカーソル位置に挿入します。

#+BEGIN_EXAMPLE
Sat Jul 30 06:00:50 2016
#+END_EXAMPLE


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="crux"]
