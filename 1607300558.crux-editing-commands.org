#+BLOG: rubikitch
#+POSTID: 2575
#+DATE: [2016-07-30 Sat 05:58]
#+PERMALINK: crux-editing-commands
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs
#+EL_PKG_NAME: crux
#+EL_TAGS: emacs, %p, %p.el, emacs lisp %p, elisp %p, emacs %f %p, emacs %p 使い方, emacs %p 設定, emacs パッケージ %p, helm-show-kill-ring, anything-show-kill-ring, markdown, github, open-line, relate:smart-newline, open-line, delete-indentation, kill-whole-line, move-beginning-of-line, indent-defun, aspell, スペルチェック 略語展開, 現在時刻を入力
#+EL_TITLE: Emacs Lisp Elisp パッケージ インストール 設定 使い方 
#+EL_TITLE0: 【10選】標準コマンドをちょっと便利にするいろいろな編集コマンド
#+EL_URL: 
#+begin: org2blog
#+DESCRIPTION: MELPAのEmacs Lispパッケージcruxの紹介
#+MYTAGS: package:crux, emacs 使い方, emacs コマンド, emacs, crux, crux.el, emacs lisp crux, elisp crux, emacs melpa crux, emacs crux 使い方, emacs crux 設定, emacs パッケージ crux, helm-show-kill-ring, anything-show-kill-ring, markdown, github, open-line, relate:smart-newline, open-line, delete-indentation, kill-whole-line, move-beginning-of-line, indent-defun, aspell, スペルチェック 略語展開, 現在時刻を入力
#+TAGS: package:crux, emacs 使い方, emacs コマンド, emacs, crux, crux.el, emacs lisp crux, elisp crux, emacs melpa crux, emacs crux 使い方, emacs crux 設定, emacs パッケージ crux, helm-show-kill-ring, anything-show-kill-ring, markdown, github, open-line, relate:smart-newline, open-line, delete-indentation, kill-whole-line, move-beginning-of-line, indent-defun, aspell, スペルチェック 略語展開, 現在時刻を入力, Emacs, M-x crux-smart-open-line-above, M-x kill-whole-line, M-x beginning-of-line, M-x back-to-indentation, M-x move-beginning-of-line, M-x ispell-word, define-abbrev
#+TITLE: emacs crux.el : 【10選】標準コマンドをちょっと便利にするいろいろな編集コマンド | MELPA Emacs Lisp Elisp パッケージ インストール 設定 使い方 
#+BEGIN_HTML
<table>
<tr><td>パッケージ名</td><td>crux</td></tr>
<tr><td>概要(原文)</td><td>A Collection of Ridiculously Useful eXtensions</td></tr>
<tr><td>リポジトリ</td><td><a href="http://melpa.org/">MELPA</a></td></tr>
<tr><td>取得先</td><td><a href="https://github.com/bbatsov/crux">https://github.com/bbatsov/crux</a></td></tr>
<tr><td>バージョン</td><td>20160725.59</td></tr>
<tr><td>関連記事</td><td><a href="http://rubikitch.com/tag/package:crux/">package:crux</a> <a href="http://rubikitch.com/tag/package:smart-newline/">package:smart-newline</a></td></tr>
</table>
<br />
#+END_HTML
#+INCLUDE: "include.crux.org" 

cruxには様々な編集コマンドが用意されています。
ひとつひとつ見ていきましょう。
** crux インストール
このパッケージはmelpaにあるので [[http://rubikitch.com/package-initialize][パッケージの初期設定]] を行ってください。

M-x package-refresh-contents
M-x package-install crux


#+end:
** 概要                                                             :noexport:
#+INCLUDE: "include.crux.org" 

cruxには様々な編集コマンドが用意されています。
ひとつひとつ見ていきましょう。

** M-x crux-indent-rigidly-and-copy-to-clipboard
*M-x crux-indent-rigidly-and-copy-to-clipboard* は、
regionをインデントした内容をキルリングとクリップボードに格納します。


このコマンドを実行しても、見た目上何の変化もないので不思議に思うかもしれませんが、
M-x helm-show-kill-ringやM-x anything-show-kill-ringでキルリングの内容を見てみればインデントされた内容が入っていることが確認されます。

デフォルトのインデント幅は4ですが、数引数により任意の数のインデントに設定できます。
デフォルトが4なのは、おそらくMarkdownでコードを貼り付ける際にスペース4つのインデントが必要だからだと思われます。
ブラウザからGitHubへ書き込むときにEmacsのコードを貼り付けるのに便利でしょう。

** M-x crux-smart-open-line-above

*M-x crux-smart-open-line-above* は、現在行より1つ上の行に空行を作成した後にインデントします。
実行時の桁には依存しません。

カーソル位置を★とすると、このような挙動になります。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  ★
  (interactive)
  )
#+END_SRC



** M-x crux-smart-open-line
*M-x crux-smart-open-line* は、現在行より1つ下の行に空行を作成した後にインデントします。
crux-smart-open-line-aboveと対比してください。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (interactive)
  ★
  )
#+END_SRC

** M-x crux-top-join-line
*M-x crux-top-join-line* は、下の行と連結します。
ぶっちゃけ (delete-indentation 1) を呼んでいるだけです。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (interactive)★)
#+END_SRC

** M-x crux-kill-whole-line
*M-x crux-kill-whole-line* は、 *M-x kill-whole-line* の後にインデントします。
現在行の内容はC-k 同様削除されてキルリングに格納されます。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  ★)
#+END_SRC

** M-x crux-kill-line-backwards
*M-x crux-kill-line-backwards* は、現在行の行頭からカーソル位置までを削除し、キルリングに挿入します。
その後にインデントを正します。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  active)
  )
#+END_SRC

見ての通り、Lispで使うと括弧の対応が崩れるので危険です(笑)
** M-x crux-move-beginning-of-line
*M-x crux-move-beginning-of-line* は、C-a(*M-x beginning-of-line*)の強力版です。
最初に行頭の非空白文字に移動し、もう一度実行すると行頭に移動します。
M-m (*M-x back-to-indentation*) と *M-x move-beginning-of-line* の合わせ技です

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  ★(interactive)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
★  (interactive)
  )
#+END_SRC


** M-x crux-indent-defun
*M-x crux-indent-defun* は、現在の関数をインデントします。
不思議なことにEmacs標準にはなぜかM-x indent-defunが用意されていないのです。

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
    (inter★active)
  )
#+END_SRC

↓

#+BEGIN_SRC emacs-lisp :results silent
(defun test ()
  (inter★active)
  )
#+END_SRC


** M-x crux-ispell-word-then-abbrev
*M-x crux-ispell-word-then-abbrev* は、 M-$ (*M-x ispell-word* でスペルチェック)の後に略語を登録します(*define-abbrev*)。
英語でスペルチェックするには aspell をインストール後、 ~/.aspell.conf に

#+BEGIN_EXAMPLE
lang en_US
#+END_EXAMPLE

と書いてください。

C-uをつけるとlocal abbrev、つけないとglobal abbrevとなります。

** M-x crux-insert-date
*M-x crux-insert-date* は、現在時刻をカーソル位置に挿入します。

#+BEGIN_EXAMPLE
Sat Jul 30 06:00:50 2016
#+END_EXAMPLE


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
