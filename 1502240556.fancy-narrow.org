#+BLOG: rubikitch
#+POSTID: 721
#+BLOG: rubikitch
#+DATE: [2015-02-24 Tue 05:56]
#+PERMALINK: fancy-narrow
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: ナローイング
#+EL_PKG_NAME: fancy-narrow
#+TAGS: 
#+EL_TITLE0: ナローイングを可視化する
#+EL_URL: 
#+begin: org2blog
#+TITLE: fancy-narrow.el : ナローイングを可視化する
[includeme file="inc-package-table.php" name="fancy-narrow" where="melpa"]

#+end:
** 概要
*ナローイング* とは、テキストの一部のみを表示するもので、
編集操作をその部分に限定できます。

一方、ナローイングされたことに気付かなかったりすることもあります。

そこで、 *fancy-narrow.el* はナローイングの
範囲外においては薄い色で表示させます。


とはいえ実装を見てみると、
elispで「見える化されたナローイング」を実装していて
ナローイングで起こる各現象をエミュレートしています。

たとえば、 *point-min* や *point-max* が
fancy-narrowの開始・終了位置を返すようになったり、
カーソル移動コマンドがfancy-narrowの範囲外に行かないように
アドバイスがかけられています。

マイナーモード *M-x fancy-narrow-mode* を有効にすると、
ナローイング系のC-x nコマンド群がfancy-narrowバージョンに
再割り当てされます。


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[[file:/r/sync/screenshots/20150224061154.png]]
Fig1: C-x n dでその関数以外を薄い色にする
[includeme file="inc-package-install.php" name="fancy-narrow" where="melpa"]
** narrow-indirect.elと比較

「ナローイングされたことをわかるようにする」という目的では、
間接バッファを使った[[http://emacs.rubikitch.com/narrow-indirect/][narrow-indirect.el(レビュー)]] もあります。

fancy-narrow.elは無数のアドバイスにより
標準の関数の挙動を変更しているので、
かなり強引と言わざるを得ません。

対して間接バッファをナローイングしているだけの
narrow-indirect.elはフックやアドバイスもなくクリーンです。

** 設定 [[http://rubikitch.com/f/150224052934.fancy-narrow.el][150224052934.fancy-narrow.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/150224/150224052934.fancy-narrow.el"
#+BEGIN_SRC fundamental
(fancy-narrow-mode 1)
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/150224052934.fancy-narrow.el
$ emacs -Q -f package-initialize -l 150224052934.fancy-narrow.el
#+END_EXAMPLE

# /r/sync/screenshots/20150224061154.png http://rubikitch.com/wp-content/uploads/2015/02/wpid-20150224061154.png
[includeme file="inc-package-relate.php" name="fancy-narrow"]
