#+BLOG: rubikitch
#+POSTID: 865
#+BLOG: rubikitch
#+DATE: [2015-04-24 Fri 03:36]
#+PERMALINK: shut-up
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: ユーザインターフェース
#+EL_PKG_NAME: shut-up
#+TAGS: 
#+EL_TITLE0: お前は黙ってろ！！！
#+EL_URL: 
#+begin: org2blog
#+TITLE: shut-up.el : お前は黙ってろ！！！
[includeme file="inc-package-table.php" name="shut-up" where="melpa"]

#+end:
** 概要
Emacsはたまに饒舌が過ぎることがあります。

*message* 関数や *write-region* 関数、 *load* 関数は
*エコーエリア* にメッセージを出力します。

しかし、メッセージを抑制したいときがあります。

たとえば一時ファイルの読み書きでは
黙っててほしいものです。

そこで *shut-up* というマクロを使います。

使い方は簡単で黙らせたいコードを (shut-up 〜 ) で囲むだけです。

すると、開発版Emacsで導入された *inhibit-message* = t に設定され、
message、write-region、load関数がメッセージを表示しなくなります。

また、 *standard-output* への出力もなくなります。

実際はメッセージを消しているのではなくて、
特定のバッファにリダイレクトしているだけですが、
*shut-up-current-output* 関数で蓄えられたメッセージを得られます。

#+BEGIN_SRC emacs-lisp :results silent
;;; 何も表示しない
(require 'shut-up)
(shut-up
  (message "test")                      ;このメッセージが蓄積される
  (with-temp-buffer
    (insert "a silent message")
    (write-region nil nil  "/tmp/silent-message.txt") ;黙って保存
    (shut-up-current-output)))          ; => "test\n"
#+END_SRC

*shut-up.el* は短いものの *一時的な関数再定義* をする
巧妙なテクニックを使っているのでコードを読んでみると
elispの勉強になるかと思います。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-install.php" name="shut-up" where="melpa"]
[includeme file="inc-package-relate.php" name="shut-up"]
