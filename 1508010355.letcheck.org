#+BLOG: rubikitch
#+POSTID: 1058
#+BLOG: rubikitch
#+DATE: [2015-08-01 Sat 03:55]
#+PERMALINK: letcheck
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs Lisp支援
#+EL_PKG_NAME: letcheck
#+TAGS: 初心者安心, るびきちオススメ
#+EL_TITLE0: 【LISP】誤ったlet式を自動チェックする
#+EL_URL: 
#+begin: org2blog
#+TITLE: letcheck.el : 【LISP】誤ったlet式を自動チェックする
[includeme file="inc-package-table.php" name="letcheck" where="melpa"]

#+end:
** 概要
Lispのlet式は他言語を使っている人にとってハマることがあります。

というのは、ひとつのlet式のローカル変数は同時に初期化されるため、
前の変数を参照できないからです。

たとえばRubyでこのようなコードを

#+BEGIN_SRC ruby :results xmp silent
x = 1
y = x + 1
[x, y]
#+END_SRC

elisp/Common Lisp/Schemeに直接変換してもうまくいきません。

#+BEGIN_SRC emacs-lisp :results silent
;;; 間違ったlet式
(let ((x 1)
      (y (+ x 1)))
  (list x y))
#+END_SRC

xがvoidであるため、エラーになります。

正しくはlet*を使うことです。

*letcheck.el* には *M-x letcheck-mode* というマイナーモードが定義されていて
参照されてない変数をハイライトします。



# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150801040136.png]]
Fig1: voidな変数xがハイライトされて誤用だとわかる

[includeme file="inc-package-install.php" name="letcheck" where="melpa"]
[includeme file="inc-package-relate.php" name="letcheck"]
