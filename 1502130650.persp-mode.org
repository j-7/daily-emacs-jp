#+BLOG: rubikitch
#+DATE: [2015-02-13 Fri 06:50]
#+PERMALINK: persp-mode
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:ウィンドウ構成とバッファリストを切替える。その設定は永続化される
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: ウィンドウ構成切り替え
#+EL_PKG_NAME: persp-mode
#+TAGS: 永続化, るびきちオススメ
#+EL_TITLE0: 『さらに』進化したワークスペース(ウィンドウ構成・プロジェクト)管理！perspectiveはいらない子
#+EL_URL: 
#+begin: org2blog
#+TITLE: persp-mode.el : 『さらに』進化したワークスペース(ウィンドウ構成・プロジェクト)管理！perspectiveはいらない子
[includeme file="inc-package-table.php" name="persp-mode" where="melpa"]

#+end:
** 概要
<2015-02-22 Sun> [[http://emacs.rubikitch.com/elscreen-separate-buffer-list/][elscreen-separate-buffer-list.el(レビュー)]] は
elscreenで同等のことを実現します。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
*persp-mode.el* は、Emacsでワークスペースを実現します。

[[http://emacs.rubikitch.com/perspective/][perspective.el(レビュー)]] との違いは、
それぞれのperspectiveが永続化できることです。

Emacs再起動時には開かれているファイルバッファが復元されます。

つまり、[[http://emacs.rubikitch.com/save-visited-files/][save-visited-files.el(レビュー)]] の機能も含んでいます。

また、perspective.elでのバグが取り除かれているようです。

perspective.elもpersp-mode.elも *M-x persp-mode* と同じ名前なので、
/使う際にはperspective.elは削除してください。/


ワークスペースというと、ウィンドウマネージャーやデスクトップ環境で
用途別にウィンドウのレイアウトを切り替える機能です。

Emacsでワークスペースといえば、
ウィンドウ構成を切り替えるだけだと思いがちですが、
persp-mode.elはそれだけでなく、バッファリストも管理します。

つまり、現状のウィンドウ構成切り替えである
- [[http://emacs.rubikitch.com/elscreen/][elscreen.el(レビュー)]]
- spaces.el
などよりも進化しています。

windows.elも一応バッファリストを管理していますが、
単に順番を管理しているだけです。

perspectiveとは「視点・見通し」という意味があり、
現在のワークスペースにおいて選択できるバッファを限定することで
現在のタスクに視点を集中し、見通しを良くします。

こうすることで、Emacs内で複数のプロジェクトを動かしているときに、
そのプロジェクトに集中できるようになります。

バッファリストの管理について気になったのでコードを読んだところ、
idoのバッファ選択の制御と *read-buffer-function* の設定を
行っていることがわかりました。

helmでのバッファ選択(*M-x helm-buffers-list* 、 *helm-source-buffers-list*) は、
idoのバッファリストを呼び出しているので、persp-mode.elはhelmにも対応しています。

anythingでのバッファ選択や標準のC-x C-bは、
idoではなくて直接 (buffer-list) を呼んでいるので
すべてのバッファが見えます。
[includeme file="inc-package-install.php" name="persp-mode" where="melpa"]
** 設定 [[http://rubikitch.com/f/150213062623.persp-mode.el][150213062623.persp-mode.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/150213/150213062623.persp-mode.el"
#+BEGIN_SRC fundamental
(setq persp-keymap-prefix (kbd "C-c p")) ;prefix
(setq persp-add-on-switch-or-display t) ;バッファを切り替えたら見えるようにする
(persp-mode 1)
(defun persp-register-buffers-on-create ()
  (interactive)
  (dolist (bufname (condition-case _
                       (helm-comp-read
                        "Buffers: "
                        (mapcar 'buffer-name (buffer-list))
                        :must-match t
                        :marked-candidates t)
                     (quit nil)))
    (persp-add-buffer (get-buffer bufname))))
(add-hook 'persp-activated-hook 'persp-register-buffers-on-create)
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/150213062623.persp-mode.el
$ emacs -Q -f package-initialize -l 150213062623.persp-mode.el
#+END_EXAMPLE

persp-modeを有効にした時点で、noneというワークスペースが作成されます。
(perspective.elではmainという名前)

新しいワークスペースを作ったり切り替えるには
*C-c p s* (*persp-switch*) を使います。

現在のワークスペースを削除するには *C-c p c* (*persp-kill*) を使います。

この2つさえ知っていればとりあえず使えます。

タスクを始めるために新しいワークスペースを作ると、
/*scratch*バッファに切り替わり、/
(perspective.elではperspective専用のscratchバッファになる)
他のバッファがすべてリストから見えなくなります。

そこで、新しいワークスペースを作成するときに、
ワークスペースに取り込みたいバッファをhelm選択できるようにしました。
(フックの名前が変更されただけでperspectiveでの設定が使える)

C-SPCで複数個選択できます。

もし、ワークスペース作成時にバッファを取り込んでいない場合は、
C-x C-fや *recentf* (*M-x helm-mini* 、 *M-x helm-for-files* 等)から
選択します。

[[file:/r/sync/screenshots/20150128083721.png]]
Fig1: data.c/window.c/files.el/window.elを開いている状態

[[file:/r/sync/screenshots/20150128083736.png]]
Fig2: C-c p sでcというperspectiveを作成し、C-SPCで2つのcバッファを選択

[[file:/r/sync/screenshots/20150128083750.png]]
Fig3: 最初は *scratch*(c) バッファが作成される

[[file:/r/sync/screenshots/20150128083814.png]]
Fig4: helmのバッファリストからは2つのcバッファと*scratch*(c)しか見えない

その後、C-c p s noneを実行すると、
noneのウィンドウ構成が復元され、Fig1に戻ります。

同様にC-c p s elでelバッファのみのワークスペースも作成できます。

[[file:/r/sync/screenshots/20150128084217.png]]
Fig5: idoにも対応！

# /r/sync/screenshots/20150128083721.png http://rubikitch.com/wp-content/uploads/2015/02/wpid-20150128083721.png
# /r/sync/screenshots/20150128083736.png http://rubikitch.com/wp-content/uploads/2015/02/wpid-20150128083736.png
# /r/sync/screenshots/20150128083750.png http://rubikitch.com/wp-content/uploads/2015/02/wpid-20150128083750.png
# /r/sync/screenshots/20150128083814.png http://rubikitch.com/wp-content/uploads/2015/02/wpid-20150128083814.png
# /r/sync/screenshots/20150128084217.png http://rubikitch.com/wp-content/uploads/2015/02/wpid-20150128084217.png
[includeme file="inc-package-relate.php" name="persp-mode"]
