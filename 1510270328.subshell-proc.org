#+BLOG: rubikitch
#+POSTID: 1217
#+BLOG: rubikitch
#+DATE: [2015-10-27 Tue 03:28]
#+PERMALINK: subshell-proc
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: プログラム実行
#+EL_PKG_NAME: subshell-proc
#+TAGS: 
#+EL_TITLE0: 【Emacsランチャー】シェルコマンドを実行するEmacsコマンドを一発登録する！
#+EL_URL: 
#+begin: org2blog
#+TITLE: subshell-proc.el : 【Emacsランチャー】シェルコマンドを実行するEmacsコマンドを一発登録する！
[includeme file="inc-package-table.php" name="subshell-proc" where="melpa"]

#+end:
** 概要
Emacsは *アプリケーションランチャー* です！
なぜなら外部プログラムを呼び出せるからです。
しかし、プログラムを起動するEmacsコマンドを定義するマクロが標準で用意されていないのは悲しいことです。

そこで、 *subshell-proc.el* の *defproc* マクロを使えば一発です！
comint-mode(shell-modeの元となるモード)を使っているのでシェルのような対話的プログラムにも対応しています。

#+BEGIN_EXAMPLE
(defproc コマンド名 プログラム プログラムの引数リスト &optional 説明文字列)
#+END_EXAMPLE

引数リストは定義するコマンド内で評価されるので、buffer-file-nameやdefault-directoryなども渡せます。
たとえば文字列と buffer-file-name と default-directory を表示するだけのM-x echo-testはこのように定義されます。

#+BEGIN_EXAMPLE
(require 'subshell-proc)
(defproc echo-test "echo" `("string" ,buffer-file-name ,default-directory))
#+END_EXAMPLE

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20151027035125.png]]
Fig1: M-x echo-test

よって、得意な言語でサッとスクリプトを書いてdefprocで定義してキーに割り当ててしまえば、すぐにEmacsで呼び出せます。

正直、僕はこのような手軽に使えるelispが登場するのを待っていました。


# /r/sync/screenshots/20151027035125.png http://rubikitch.com/wp-content/uploads/2016/07/20151027035125.png
[includeme file="inc-package-install.php" name="subshell-proc" where="melpa"]
[includeme file="inc-package-relate.php" name="subshell-proc"]
