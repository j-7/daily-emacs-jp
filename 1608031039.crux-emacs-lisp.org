#+BLOG: rubikitch
#+POSTID: 1508
#+BLOG: rubikitch
#+DATE: [2016-08-03 Wed 10:39]
#+PERMALINK: crux-emacs-lisp
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs Lisp支援
#+EL_PKG_NAME: crux
#+TAGS: ソース解読推奨, crux
#+EL_TITLE0: 一瞬で計算結果を入力する方法＋α
#+EL_URL: 
#+begin: org2blog
#+TITLE: crux.el : 一瞬で計算結果を入力する方法＋α
[includeme file="inc-package-table.php" name="crux" where="melpa"]

#+end:
** 概要
#+INCLUDE: "include.crux.org"

長々続いたcruxシリーズも今日が最後です。
最後はEmacs Lisp関係のコマンド2つを紹介しますね。

[includeme file="inc-package-install.php" name="crux" where="melpa"]
** crux-eval-and-replace
このコマンドはカーソル位置直前のS式を評価結果に置き換えます。

標準コマンドのC-x C-e (*eval-last-sexp*)もC-uをつければ評価結果を挿入しますが、
このコマンドはS式を消す(厳密にはキルリングに入れる)点が異なります。

これはS式をそのまま結果に置き換えるため、
ちょっとした計算結果を入力するときには
その場でサッとS式を書いてこのコマンドを実行すればいいことになります。

★をカーソル位置とします。

#+BEGIN_EXAMPLE
(+ 3 7)★
#+END_EXAMPLE

↓M-x crux-eval-and-replace

#+BEGIN_EXAMPLE
10
#+END_EXAMPLE

#+BEGIN_EXAMPLE
(+ 3 7)★
#+END_EXAMPLE

↓C-u C-x C-e

#+BEGIN_EXAMPLE
(+ 3 7)10
#+END_EXAMPLE

M-x crux-eval-and-replaceの定義はとても簡単で実質3行です。

** crux-recompile-init
このコマンドは ~/.emacs.d/ 以下の*.elファイルをバイトコンパイルします。
*.elcが存在しない場合でもバイトコンパイルします。

ちなみに僕は設定ファイルをバイトコンパイルしない人なので使いません。
設定ファイルまでバイトコンパイルするのは、
速度向上にほどんと貢献しないばかりか
管理の手間がかかるからです。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="crux"]
