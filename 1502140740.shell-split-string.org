#+BLOG: rubikitch
#+POSTID: 704
#+BLOG: rubikitch
#+DATE: [2015-02-14 Sat 07:40]
#+PERMALINK: shell-split-string
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: 文字列操作
#+EL_PKG_NAME: shell-split-string
#+TAGS: 
#+EL_TITLE0: シェル文字列を分解するたった1つの関数
#+EL_URL: 
#+begin: org2blog
#+TITLE: shell-split-string.el : シェル文字列を分解するたった1つの関数
[includeme file="inc-package-table.php" name="shell-split-string" where="melpa"]

#+end:
** 概要

*shell-split-string.el* は、Unixのシェルの文字列を単語ごとに分けます。

たったひとつの関数 *shell-split-string* のみが用意されています。

文字列をシェルに渡すためにメタ文字をクオートする
*shell-quote-argument* の逆と考えてください。

シェルの文法を解釈する *split-string* ともいえます。

elispでシェルのような対話的インターフェースで何か作るときに
シェルの構文で言語化すると使いやすいのではないでしょうか？

autoloadされているので、requireは不要です。

使用例:
#+BEGIN_SRC emacs-lisp :results silent
(shell-split-string "abc")              ; => ("abc")
(shell-split-string "abc  def")         ; => ("abc" "def")
(shell-split-string "abc \"def ghi\"")  ; => ("abc" "def ghi")
(shell-split-string "abc 'de f'ghi")    ; => ("abc" "de fghi")
(shell-split-string "abc \"d\\\"ef\"")  ; => ("abc" "d\"ef")
#+END_SRC

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-install.php" name="shell-split-string" where="melpa"]
[includeme file="inc-package-relate.php" name="shell-split-string"]
