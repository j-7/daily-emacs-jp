#+BLOG: rubikitch
#+POSTID: 294
#+BLOG: rubikitch
#+DATE: [2014-09-14 Sun 12:21]
#+PERMALINK: hookify
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t
#+ISPAGE: nil
#+DESCRIPTION:フックを即席で設定するコマンド
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: デバッグ
#+EL_PKG_NAME: hookify
#+TAGS: ソース解読推奨
#+EL_TITLE0: ファイル保存後やコマンド実行後などに自動的に実行するアクションを即席で設定する！バッファローカルフックを設定・解除するコマンド
#+begin: org2blog
#+TITLE: hookify.el : ファイル保存後やコマンド実行後などに自動的に実行するアクションを即席で設定する！バッファローカルフックを設定・解除するコマンド
[includeme file="inc-package-table.php" name="hookify" where="melpa"]

#+end:
** 概要
*hookify.el* は、 *バッファローカルなフック* を
手軽に設定するコマンドです。

ソースコードはめちゃくちゃ短いです。

実質10行程度なので仕組みが気になるならば、
M-x *find-function* hookifyで読んでみるとよいです。

使い方は *M-x hookify* を実行します。

そしてフック名とそこで実行するLisp式を入力します。

たったこれだけで一時的に使えるフックが定義できます。

フックを解除するにはC-u M-x hookify→フック名→Lisp式で、
そのLisp式のフックを解除します。

そのときはM-pで履歴からたどってください。

ある程度Emacsに慣れている人がステップアップするにはおすすめです。
[includeme file="inc-package-install.php" name="hookify" where="melpa"]
** 使用例
*after-save-hook* で保存後にシェルコマンドを実行したりとか、
*post-command-hook* でデバッグに利用するのが便利です。

ファイルを保存した後に *nginxを再起動* するには、
#+BEGIN_EXAMPLE
M-x hookify after-save-hook RET
  (shell-command "systemctl restart nginx")
#+END_EXAMPLE

ファイルを保存した後に ~/backup.txt に *バックアップ* するには、

#+BEGIN_EXAMPLE
M-x hookify after-save-hook RET
  (copy-file (buffer-file-name) "~/backup.txt")
#+END_EXAMPLE


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-relate.php" name="hookify"]
