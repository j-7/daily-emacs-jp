#+BLOG: rubikitch
#+POSTID: 628
#+BLOG: rubikitch
#+DATE: [2015-01-18 Sun 06:43]
#+PERMALINK: chinese-word-at-point
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: バッファ関連
#+EL_PKG_NAME: chinese-word-at-point
#+TAGS: thing-at-point, 日本語
#+EL_TITLE0: 【日本語対応】茶筌と併用して日本語の単語を認識させるライブラリ
#+EL_URL: 
#+begin: org2blog
#+TITLE: chinese-word-at-point.el : 【日本語対応】茶筌と併用して日本語の単語を認識させるライブラリ
[includeme file="inc-package-table.php" name="chinese-word-at-point" where="melpa"]

#+end:
** 概要
*chinese-word-at-point.el* は、元々中国語に対応した
*word-at-point* を提供するものですが、
分かち書きをするコマンドを日本語のものに差し替えることで
日本語でもそれなりに(←そこ重要)使えます。

本設定では日本語形態素解析ツールの [[http://sourceforge.jp/projects/chasen-legacy/][茶筌]] を使っています。

ただ、(word-at-point)の範囲でしか探索しないので、
漢字とかなが交じった単語の対応が弱いです。

中国語の場合はすべて漢字なのでそれで十分ですが、
日本語は漢字かな混じり文なのでsentenceから探索しないと
正確には動作しません。

word→sentenceに書き換え、
かつ「日本語文字列」の判定を厳密にすれば
完全に日本語に対応できるでしょうけど
ぼぼ全面的な再定義になってしまいます。

とりあえずproof-of-concept的な意味で記事にしておきます。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
[includeme file="inc-package-install.php" name="chinese-word-at-point" where="melpa"]
** 設定 [[http://rubikitch.com/f/150118063159.chinese-word.el][150118063159.chinese-word.el(以下のコードと同一)]]
#+BEGIN: include :file "/r/sync/junk/150118/150118063159.chinese-word.el"
#+BEGIN_SRC fundamental
(require 'chinese-word-at-point)
;;; 茶筌で分かち書きをする
(setq chinese-word-split-command "echo %s | chasen -F '%%m '")
;;; ひらがな・カタカナを加えるように修正
(defun chinese-word--cjk-characters-p (char)
  "Return t if CHAR is a CJK character.

For CJK characters range in Unicode,
see URL `http://stackoverflow.com/questions/1366068/whats-the-complete-range-for-chinese-characters-in-unicode/'"
  (or (<= #x4E00 char #x9FCC)
      (<= #x3040 char #x309F)           ;hiragana
      (<= #x30A0 char #x30FF)           ;katakana
      (= #x3005 char)                   ;々
      (<= #x31F0 char #x31FF)           ;small katakana
      (<= #x3400 char  #x4DB5)
      (<= #x20000 char  #x2A6D6)
      (<= #x2A700 char  #x2B734)
      (<= #x2B740 char  #x2B81D)))

;;; 日本語に適用しているのにchineseというのはよくないのでjapaneseも定義
;;; (thing-at-point 'japanese-word)
;;; (thing-at-point 'japanese-or-other-word)
;;; が使えるようになる
(put 'japanese-word 'bounds-of-thing-at-point 'chinese-word-at-point-bounds)
(put 'japanese-or-other-word 'bounds-of-thing-at-point
     'chinese-or-other-word-at-point-bounds)
;;; テストコマンド
(defun show-word-at-point-ja ()
  "現在の単語をミニバッファに表示する(日本語対応)"
  (interactive)
  (message "%s" (thing-at-point 'japanese-or-other-word)))
;;; Emacsは楽しい システムのメンテナンス 研究・情報収集
#+END_SRC

#+END:

** 実行方法
#+BEGIN_EXAMPLE
$ wget http://rubikitch.com/f/150118063159.chinese-word.el
$ emacs -Q -f package-initialize -l 150118063159.chinese-word.el
#+END_EXAMPLE
[includeme file="inc-package-relate.php" name="chinese-word-at-point"]
