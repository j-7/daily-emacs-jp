#+BLOG: rubikitch
#+POSTID: 51
#+BLOG: rubikitch
#+DATE: [2014-11-28 Fri 08:51]
#+PERMALINK: melmag157
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: るびきち塾メルマガ
#+DESCRIPTION: Emacsの鬼るびきちのココだけの話#157について
#+MYTAGS:
#+TITLE: Emacsでプロジェクト管理入門

先週のメルマガはプロジェクト管理の根底にあるものとして
バッファローカル変数について触れました。

バッファローカル変数はユーザからそのままでは
扱いづらいので、ファイルを開いたときに設定する
ファイルローカル変数があります。

しかし、ファイルローカル変数を同一ディレクトリの
すべてのファイルに記述するのは面倒な上、
変更が困難という問題がついてきます。

それを解決するのがディレクトリローカル変数です。

ディレクトリローカル変数を使うことでそのディレクトリと
サブディレクトリ共通の設定ができます。

Emacsそのものにはプロジェクトという概念は
ありませんが、事実上ディレクトリローカル変数が
プロジェクトの独自の設定ということになります。

しかし、それだけではプロジェクトの
概念を実装し切ったわけではありません。

実際にユーザがやりたいのは、

プロジェクト全体に対してgrepしたり、
コンパイルしたり、
タグファイルを再生成したり、
プロジェクト内のファイルを素早く切り替えたり、

といったことです。

これらのことを円滑に行うためには、
前提条件としてプロジェクトのルートディレクトリを
自動判別しておく必要があります。

シェルでわざわざルートディレクトリまで
手動でcdしてコンパイルするのは面倒です。

そこで登場するのがプロジェクトを扱うパッケージです。

今週と来週はプロジェクト管理パッケージ及び
組み合わせると便利なパッケージを紹介します。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
